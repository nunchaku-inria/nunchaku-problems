data nib :=
  N0
| N1
| N2
| N3
| N4
| N5
| N6
| N7
| N8
| N9
| Na
| Nb
| Nc
| Nd
| Ne
| Nf.

val n2n : type.
val app_n2n : n2n -> nib -> nib.
val proto_n2n : n2n -> nib.

val alpha_n2n : type.
val gamma1_n2n : alpha_n2n -> n2n.
val gamma2_n2n : alpha_n2n -> nib.

val HAS_PROTO_n2n : n2n -> prop.

axiom
  forall (h : n2n).
    HAS_PROTO_n2n h = (exists (b : alpha_n2n). gamma1_n2n b = h && gamma2_n2n b = proto_n2n h).

val IN_app_n2n : n2n -> nib -> prop.

axiom
  forall (h : n2n) (j : nib).
    IN_app_n2n h j = (exists (b : alpha_n2n). gamma1_n2n b = h && gamma2_n2n b = j).

val IN_APP_n2n : n2n -> nib -> prop.

axiom
  forall (h : n2n) (j : nib).
    IN_APP_n2n h j = (exists (b : alpha_n2n). gamma1_n2n b = h && (gamma2_n2n b = j || gamma2_n2n b = proto_n2n h)).

val APP_n2n : n2n -> nib -> nib.

axiom
  forall (h : n2n) (j : nib).
#    APP_n2n h j = app_n2n h (if exists (b : alpha_n2n). gamma1_n2n b = h && gamma2_n2n b = j then j else proto_n2n h).
    APP_n2n h j = app_n2n h (if IN_app_n2n h j then j else proto_n2n h).

axiom forall (f : n2n) (g : n2n).
  f = g
  || (exists (x : nib). IN_app_n2n f x && IN_app_n2n g x && ~ (app_n2n f x = app_n2n g x)).

val inc : n2n.

axiom
  forall (a : alpha_n2n).
    gamma1_n2n a = inc =>
    app_n2n inc (gamma2_n2n a) =
      match gamma2_n2n a with
      | N0 -> N1
      | N1 -> N2
      | N2 -> N3
      | N3 -> N4
      | N4 -> N5
      | N5 -> N6
      | N6 -> N7
      | N7 -> N8
      | N8 -> N9
      | N9 -> Na
      | Na -> Nb
      | Nb -> Nc
      | Nc -> Nd
      | Nd -> Ne
      | Ne -> Nf
      | Nf -> N0
      end.

axiom ~ (HAS_PROTO_n2n inc)
 || (forall (x : nib). exists (b : alpha_n2n). gamma1_n2n b = inc && gamma2_n2n b = x).

val ink : n2n.

axiom
  forall (a : alpha_n2n).
    gamma1_n2n a = ink =>
    app_n2n ink (gamma2_n2n a) =
      match gamma2_n2n a with
      | N0 -> N1
      | N1 -> N2
      | N2 -> N3
      | N3 -> N4
      | N4 -> N5
      | N5 -> N6
      | N6 -> N7
      | N7 -> N7 # sic
      | N8 -> N9
      | N9 -> Na
      | Na -> Nb
      | Nb -> Nc
      | Nc -> Nd
      | Nd -> Ne
      | Ne -> Nf
      | Nf -> N0
      end.

axiom ~ (HAS_PROTO_n2n ink)
 || (forall (x : nib). exists (b : alpha_n2n). gamma1_n2n b = ink && gamma2_n2n b = x).

data byte :=
  Byte nib nib.

val alpha_mapnibs : type.
val gamma1_mapnibs : alpha_mapnibs -> n2n.
val gamma2_mapnibs : alpha_mapnibs -> byte.

val mapnibs : n2n -> byte -> byte.

axiom
  forall (a : alpha_mapnibs).
    mapnibs (gamma1_mapnibs a) (gamma2_mapnibs a) =
    match gamma2_mapnibs a with
    | Byte m n -> Byte (APP_n2n (gamma1_mapnibs a) m) (APP_n2n (gamma1_mapnibs a) n)
    end
  &&
    match gamma2_mapnibs a with
    | Byte m n -> IN_app_n2n (gamma1_mapnibs a) m && IN_app_n2n (gamma1_mapnibs a) n
    end.

val b : byte.

goal mapnibs ink b = b
  && (exists (z : alpha_mapnibs). gamma1_mapnibs z = ink && gamma2_mapnibs z = b).

#axiom
#  forall (f : n2n). f = inc || f = ink.

#val wit : n2n.
#
# goal true

#  && APP_n2n wit N0 = N1 && IN_APP_n2n wit N0
#  && APP_n2n wit N1 = N2 && IN_APP_n2n wit N1
#  && APP_n2n wit N2 = N3 && IN_APP_n2n wit N2
#  && APP_n2n wit N3 = N4 && IN_APP_n2n wit N3
#  && APP_n2n wit N4 = N5 && IN_APP_n2n wit N4
#  && APP_n2n wit N5 = N6 && IN_APP_n2n wit N5
#  && APP_n2n wit N6 = N7 && IN_APP_n2n wit N6
#  && APP_n2n wit N7 = N8 && IN_APP_n2n wit N7
#  && APP_n2n wit N8 = N9 && IN_APP_n2n wit N8
#  && APP_n2n wit N9 = Na && IN_APP_n2n wit N9
#  && APP_n2n wit Na = Nb && IN_APP_n2n wit Na
#  && APP_n2n wit Nb = Nc && IN_APP_n2n wit Nb
#  && APP_n2n wit Nc = Nd && IN_APP_n2n wit Nc
#  && APP_n2n wit Nd = Ne && IN_APP_n2n wit Nd

#  && ~ (wit = inc).

#goal inc = ink
#  && HAS_PROTO_n2n inc.

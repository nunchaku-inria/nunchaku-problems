# outcome:
#  SAT: {
#    val x_1100100_etc := LCons One (LCons One (LCons Zero (LCons Zero @uc_llist_2))).
#    val x_0100100_etc := LCons Zero (LCons One (LCons Zero @uc_llist_2)).
#    val x_100100_etc := LCons One (LCons Zero (LCons Zero @uc_llist_2)).
#    val x_0101_etc := LCons Zero (LCons One @uc_llist_1).
#    val x_1010_etc := LCons One (LCons Zero @uc_llist_1).
#  }
# expected: sat
#  SAT: {
#    val x_1100100_etc := LCons One (mu X. LCons One (LCons Zero (LCons Zero X))).
#    val x_0100100_etc := mu X. LCons Zero (LCons One (LCons Zero X).
#    val x_100100_etc := mu X. LCons One (LCons Zero (LCons Zero X)).
#    val x_0101_etc := mu X. LCons Zero (LCons One X).
#    val x_1010_etc := mu X. LCons One (LCons Zero X).
#  }

data a := Zero | One.

codata llist :=
  LNil
| LCons a llist.

val x_1010_etc : llist.
val x_0101_etc : llist.
val x_100100_etc : llist.
val x_0100100_etc : llist.
val x_1100100_etc : llist.

goal x_1010_etc = LCons One x_0101_etc
  && x_0101_etc = LCons Zero x_1010_etc
  && x_100100_etc = LCons One (LCons Zero (LCons Zero x_100100_etc))
  && x_0100100_etc = LCons Zero x_100100_etc
  && x_1100100_etc = LCons One x_100100_etc.

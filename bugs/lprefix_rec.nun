val a : type.

codata llist :=
  LNil
| LCons a llist.

val xs : llist.
val ys : llist.
val zs : llist.

rec lappend : llist -> llist -> llist :=
  forall (xs : llist) (ys : llist).
    lappend xs ys = (match xs with
      | LNil -> ys
      | LCons z zs -> LCons z (lappend zs ys)
    end).

rec lprefix : llist -> llist -> prop :=
  forall (xs : llist) (ys : llist).
    lprefix xs ys = (xs = LNil ||
      (exists (x : a). lprefix (LCons x xs) (LCons x ys))).

goal lprefix (lappend xs ys) (lappend xs zs) && ~ (lprefix ys zs).

(set-option :produce-models true)
(set-option :interactive-mode true)
(set-logic ALL_SUPPORTED)
(declare-datatypes () ((nat (Suc (_select_Suc_0 nat)) (zero )) 
   (tree
      (N (_select_N_0 nat) (_select_N_1 nat) (_select_N_2 tree) 
         (_select_N_3 tree)) 
      (X ))))
(declare-sort G_leq 0)
(declare-fun __nun_card_witness_0 () G_leq)
(declare-fun leq (nat nat) Bool)
(declare-fun proj_G_leq_0 (G_leq) nat)
(declare-fun proj_G_leq_1 (G_leq) nat)
(assert
 (forall ((a/137 G_leq))
    (and
     (= (leq (proj_G_leq_0 a/137) (proj_G_leq_1 a/137))
      (ite (is-Suc (proj_G_leq_0 a/137))
        (ite (is-Suc (proj_G_leq_1 a/137))
          (leq (_select_Suc_0 (proj_G_leq_0 a/137)) 
           (_select_Suc_0 (proj_G_leq_1 a/137)))
          false)
        true)) 
     (ite (is-Suc (proj_G_leq_0 a/137))
       (ite (is-Suc (proj_G_leq_1 a/137))
         (exists ((a/138 G_leq))
            (and
             (= (_select_Suc_0 (proj_G_leq_1 a/137)) (proj_G_leq_1 a/138)) 
             (= (_select_Suc_0 (proj_G_leq_0 a/137)) (proj_G_leq_0 a/138))))
         true)
       true))))
(declare-sort G_level 0)
(declare-fun __nun_card_witness_1 () G_level)
(declare-fun level (tree) nat)
(declare-fun proj_G_level_0 (G_level) tree)
(assert
 (forall ((a/139 G_level))
    (and
     (= (level (proj_G_level_0 a/139))
      (ite (is-N (proj_G_level_0 a/139))
        (_select_N_1 (proj_G_level_0 a/139)) zero)) 
     (ite (is-N (proj_G_level_0 a/139)) true true))))
(declare-sort G_right 0)
(declare-fun __nun_card_witness_2 () G_right)
(declare-fun right (tree) tree)
(declare-fun proj_G_right_0 (G_right) tree)
(assert
 (forall ((a/140 G_right))
    (and
     (= (right (proj_G_right_0 a/140))
      (ite (is-N (proj_G_right_0 a/140))
        (_select_N_3 (proj_G_right_0 a/140)) X)) 
     (ite (is-N (proj_G_right_0 a/140)) true true))))
(declare-sort G_left 0)
(declare-fun __nun_card_witness_3 () G_left)
(declare-fun left (tree) tree)
(declare-fun proj_G_left_0 (G_left) tree)
(assert
 (forall ((a/141 G_left))
    (and
     (= (left (proj_G_left_0 a/141))
      (ite (is-N (proj_G_left_0 a/141)) (_select_N_2 (proj_G_left_0 a/141))
        X)) 
     (ite (is-N (proj_G_left_0 a/141)) true true))))
(declare-sort G_wfx 0)
(declare-fun __nun_card_witness_4 () G_wfx)
(declare-fun wfx (tree) Bool)
(declare-fun proj_G_wfx_0 (G_wfx) tree)
(assert
 (forall ((a/142 G_wfx))
    (and
     (= (wfx (proj_G_wfx_0 a/142))
      (ite (is-N (proj_G_wfx_0 a/142))
        (ite (= (_select_N_2 (proj_G_wfx_0 a/142)) X)
          (and (= (_select_N_1 (proj_G_wfx_0 a/142)) (Suc zero)) 
           (or (= (_select_N_3 (proj_G_wfx_0 a/142)) X) 
            (and (= (level (_select_N_3 (proj_G_wfx_0 a/142))) (Suc zero)) 
             (and (= (left (_select_N_3 (proj_G_wfx_0 a/142))) X) 
              (= (right (_select_N_3 (proj_G_wfx_0 a/142))) X)))))
          (and (wfx (_select_N_2 (proj_G_wfx_0 a/142))) 
           (and (wfx (_select_N_3 (proj_G_wfx_0 a/142))) 
            (and (not (= (_select_N_3 (proj_G_wfx_0 a/142)) X)) 
             (and
              (leq (Suc (level (_select_N_2 (proj_G_wfx_0 a/142)))) 
               (_select_N_1 (proj_G_wfx_0 a/142))) 
              (and
               (leq (level (_select_N_3 (proj_G_wfx_0 a/142))) 
                (_select_N_1 (proj_G_wfx_0 a/142))) 
               (leq
                (Suc (level (right (_select_N_3 (proj_G_wfx_0 a/142))))) 
                (_select_N_1 (proj_G_wfx_0 a/142)))))))))
        true)) 
     (ite (is-N (proj_G_wfx_0 a/142))
       (ite (= (_select_N_2 (proj_G_wfx_0 a/142)) X)
         (and
          (exists ((a/152 G_level))
             (= (_select_N_3 (proj_G_wfx_0 a/142)) (proj_G_level_0 a/152))) 
          (exists ((a/153 G_left))
             (= (_select_N_3 (proj_G_wfx_0 a/142)) (proj_G_left_0 a/153))) 
          (exists ((a/154 G_right))
             (= (_select_N_3 (proj_G_wfx_0 a/142)) (proj_G_right_0 a/154))))
         (and
          (exists ((a/143 G_wfx))
             (= (_select_N_2 (proj_G_wfx_0 a/142)) (proj_G_wfx_0 a/143))) 
          (exists ((a/144 G_wfx))
             (= (_select_N_3 (proj_G_wfx_0 a/142)) (proj_G_wfx_0 a/144))) 
          (exists ((a/145 G_leq))
             (and
              (= (_select_N_1 (proj_G_wfx_0 a/142)) (proj_G_leq_1 a/145)) 
              (= (Suc (level (_select_N_2 (proj_G_wfx_0 a/142))))
               (proj_G_leq_0 a/145)))) 
          (exists ((a/146 G_level))
             (= (_select_N_2 (proj_G_wfx_0 a/142)) (proj_G_level_0 a/146))) 
          (exists ((a/147 G_leq))
             (and
              (= (_select_N_1 (proj_G_wfx_0 a/142)) (proj_G_leq_1 a/147)) 
              (= (level (_select_N_3 (proj_G_wfx_0 a/142)))
               (proj_G_leq_0 a/147)))) 
          (exists ((a/148 G_level))
             (= (_select_N_3 (proj_G_wfx_0 a/142)) (proj_G_level_0 a/148))) 
          (exists ((a/149 G_leq))
             (and
              (= (_select_N_1 (proj_G_wfx_0 a/142)) (proj_G_leq_1 a/149)) 
              (= (Suc (level (right (_select_N_3 (proj_G_wfx_0 a/142)))))
               (proj_G_leq_0 a/149)))) 
          (exists ((a/150 G_right))
             (= (_select_N_3 (proj_G_wfx_0 a/142)) (proj_G_right_0 a/150))) 
          (exists ((a/151 G_level))
             (= (right (_select_N_3 (proj_G_wfx_0 a/142)))
              (proj_G_level_0 a/151)))))
       true))))
(declare-fun t () tree)
(declare-sort G_insorl 0)
(declare-fun __nun_card_witness_5 () G_insorl)
(declare-fun insorl (tree nat) tree)
(declare-fun proj_G_insorl_0 (G_insorl) tree)
(declare-fun proj_G_insorl_1 (G_insorl) nat)
(assert
 (forall ((a/155 G_insorl))
    (and
     (= (insorl (proj_G_insorl_0 a/155) (proj_G_insorl_1 a/155))
      (ite (is-N (proj_G_insorl_0 a/155))
        (N (_select_N_0 (proj_G_insorl_0 a/155)) 
         (_select_N_1 (proj_G_insorl_0 a/155)) 
         (ite
           (leq (Suc (proj_G_insorl_1 a/155)) 
            (_select_N_0 (proj_G_insorl_0 a/155)))
           (insorl (_select_N_2 (proj_G_insorl_0 a/155)) 
            (proj_G_insorl_1 a/155))
           (_select_N_2 (proj_G_insorl_0 a/155))) 
         (ite
           (leq (Suc (_select_N_0 (proj_G_insorl_0 a/155))) 
            (proj_G_insorl_1 a/155))
           (insorl (_select_N_3 (proj_G_insorl_0 a/155)) 
            (proj_G_insorl_1 a/155))
           (_select_N_3 (proj_G_insorl_0 a/155))))
        (N (proj_G_insorl_1 a/155) (Suc zero) X X))) 
     (ite (is-N (proj_G_insorl_0 a/155))
       (and
        (exists ((a/156 G_leq))
           (and (= (proj_G_insorl_1 a/155) (proj_G_leq_1 a/156)) 
            (= (Suc (_select_N_0 (proj_G_insorl_0 a/155)))
             (proj_G_leq_0 a/156)))) 
        (ite
          (leq (Suc (_select_N_0 (proj_G_insorl_0 a/155))) 
           (proj_G_insorl_1 a/155))
          (exists ((a/157 G_insorl))
             (and (= (proj_G_insorl_1 a/155) (proj_G_insorl_1 a/157)) 
              (= (_select_N_3 (proj_G_insorl_0 a/155))
               (proj_G_insorl_0 a/157))))
          true) 
        (exists ((a/158 G_leq))
           (and
            (= (_select_N_0 (proj_G_insorl_0 a/155)) (proj_G_leq_1 a/158)) 
            (= (Suc (proj_G_insorl_1 a/155)) (proj_G_leq_0 a/158)))) 
        (ite
          (leq (Suc (proj_G_insorl_1 a/155)) 
           (_select_N_0 (proj_G_insorl_0 a/155)))
          (exists ((a/159 G_insorl))
             (and (= (proj_G_insorl_1 a/155) (proj_G_insorl_1 a/159)) 
              (= (_select_N_2 (proj_G_insorl_0 a/155))
               (proj_G_insorl_0 a/159))))
          true))
       true))))
(declare-fun x () nat)
(assert
 (and (wfx t) 
  (and (not (wfx (insorl t x))) 
   (exists ((a/160 G_wfx)) (= (insorl t x) (proj_G_wfx_0 a/160))) 
   (exists ((a/161 G_insorl))
      (and (= x (proj_G_insorl_1 a/161)) (= t (proj_G_insorl_0 a/161))))) 
  (exists ((a/162 G_wfx)) (= t (proj_G_wfx_0 a/162)))))
(check-sat)
